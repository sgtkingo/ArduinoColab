# magic_code.py
# Magie %%code ‚Äì ukl√°d√° k√≥d do sekc√≠ (globals/setup/loop/functions) s voliteln√Ωm ID bu≈àky.
# Obsahuje p≈ôehlednou n√°povƒõdu p≈ôes _help_text().

import shlex
from IPython.core.magic import Magics, magics_class, cell_magic
from IPython.display import Markdown, display

from arduino_colab_kernel.code.code_manager import code_manager
from arduino_colab_kernel.code.code_manager import ALLOWED_SECTIONS


def _help() -> str:
    # Vrac√≠ Markdown n√°povƒõdu jako text (volaj√≠c√≠ si rozhodne o zobrazen√≠)
    return """
### üß© Dostupn√© p≈ô√≠kazy `%%code`

| P≈ô√≠kaz                   | Parametry                      | Popis                                                                 |
|--------------------------|--------------------------------|------------------------------------------------------------------------|
| **`%%code globals`**     | `[bunka_id]` *(voliteln√©)*     | Ulo≈æ√≠ k√≥d do sekce **globals** (deklarace promƒõnn√Ωch, konstant).      |
| **`%%code setup`**       | `[bunka_id]` *(voliteln√©)*     | Ulo≈æ√≠ k√≥d do sekce **setup** (inicializace, bƒõ≈æ√≠ jednou).             |
| **`%%code loop`**        | `[bunka_id]` *(voliteln√©)*     | Ulo≈æ√≠ k√≥d do sekce **loop** (hlavn√≠ smyƒçka programu).                 |
| **`%%code functions`**   | `[bunka_id]` *(voliteln√©)*     | Ulo≈æ√≠ k√≥d do sekce **functions** (pomocn√© funkce, knihovn√≠ k√≥d).      |
| **`%%code help`** / `?`  | *(bez parametr≈Ø)*              | Zobraz√≠ tuto n√°povƒõdu.                                                |

**Syntax:**
- `%%code <sekce>` nebo `%%code <sekce> <bunka_id>`
- Pokud **<bunka_id>** neuvede≈°, pou≈æije se v√Ωchoz√≠ `"0"`.

**Povolen√© sekce:** `globals`, `setup`, `loop`, `functions`.

**P≈ô√≠klady:**
```python
%%code globals
int led = 13;

%%code setup 1
pinMode(led, OUTPUT);

%%code loop
digitalWrite(led, HIGH); delay(500);
digitalWrite(led, LOW);  delay(500);

%%code functions
int readSensor() { return analogRead(A0); }
"""

@magics_class
class CodeMagics(Magics):
    @cell_magic
    def code(self, line, cell):
        # --- Parsov√°n√≠ argument≈Ø (bezpeƒçnƒõ p≈ôes shlex) ---
        parts = shlex.split(line.strip()) if line else []
        section = parts[0].lower() if parts else None

        # --- Help / pr√°zdn√Ω vstup ---
        if section in (None, "help", "?"):
            display(Markdown(_help()))
        # --- Validace sekce ---
        elif section in ALLOWED_SECTIONS:
            # --- ID bu≈àky (voliteln√©) ---
            cell_id = parts[1] if len(parts) > 1 else "0"
            # --- Ulo≈æen√≠ k√≥du do spr√°vn√© sekce/bu≈àky ---
            try:
                code_manager.add_code(section, cell_id, cell)
                display(Markdown(f"`K√≥d aktualizov√°n` &nbsp;|&nbsp; sekce: `{section}`, bu≈àka: `{cell_id}`."))
            except Exception as e:
                display(Markdown(f"**Chyba p≈ôi ukl√°d√°n√≠ k√≥du:** `{e}`"))
        else:
            display(Markdown(f"**Nezn√°m√° sekce kodu nebo p≈ô√≠kaz:** `{section}`\n\n" + _help()))

def load_ipython_extension(ipython):
    ipython.register_magics(CodeMagics)